from abc import ABC, abstractmethod
from typing import List, Dict, Any

import pandas as pd


class Signal:
    """Class representing a trading signal."""
    
    def __init__(self, symbol: str, timestamp: pd.Timestamp, signal_type: str, 
               direction: str, strength: float = 1.0, metadata: Dict[str, Any] = None):
        """
        Initialize a trading signal.
        
        Args:
            symbol: The ticker symbol or asset identifier
            timestamp: When the signal was generated
            signal_type: Type of signal (entry, exit, stop_loss, etc.)
            direction: Buy or sell
            strength: Signal strength from 0.0 to 1.0
            metadata: Additional signal information
        """
        self.symbol = symbol
        self.timestamp = timestamp
        self.signal_type = signal_type
        self.direction = direction
        self.strength = strength
        self.metadata = metadata or {}
    
    def __repr__(self) -> str:
        return f"Signal({self.symbol}, {self.timestamp}, {self.signal_type}, {self.direction}, strength={self.strength})"


class Strategy(ABC):
    """Abstract base class for all trading strategies."""
    
    def __init__(self, name: str):
        """
        Initialize a trading strategy.
        
        Args:
            name: The name of the strategy
        """
        self.name = name
        self.signals: List[Signal] = []
        self.data: pd.DataFrame = None
    
    @abstractmethod
    def initialize(self) -> None:
        """
        Initialize the strategy. Called once before running the strategy.
        """
        pass
    
    @abstractmethod
    def process_data(self, data: pd.DataFrame) -> None:
        """
        Process market data.
        
        Args:
            data: DataFrame with market data
        """
        pass
    
    @abstractmethod
    def generate_signals(self) -> List[Signal]:
        """
        Generate trading signals based on processed data.
        
        Returns:
            List of trading signals
        """
        pass
    
    def get_signals(self) -> List[Signal]:
        """
        Get all signals generated by the strategy.
        
        Returns:
            List of trading signals
        """
        return self.signals
    
    def clear_signals(self) -> None:
        """Clear all signals generated by the strategy."""
        self.signals = [] 